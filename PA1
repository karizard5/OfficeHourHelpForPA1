

//  main.swift
//  Hangman
//  This program allows the user to play a game of Hangman.
//  CPSC 315-01, Fall 2018
//  Programming Assignment #1
//
//https://stackoverflow.com/questions/38164543/cannot-subscript-a-value-of-type-string-with-an-index-of-type-uint32
//https://stackoverflow.com/questions/38386969/swift-3-0-iterate-over-string-index-range
//
//
//  Created by Reid, Jon Carl on 9/3/18.
//  Copyright Â© 2018 Reid, Jon Carl. All rights reserved.
//

import Foundation

var characterInput: Character = "_"
var letterIndex: Int = 0
var letterIndexArray: Int = 6


func main(){
    print("Hello")
    print("")
    
    var chosenLetter: Character = playerGuessInput()
    
    var avaliableWords = ["Oxygen", "Nitrogen", "Molybdenum", "Hafnium", "Promethium", "Yttrium", "Seaborgium", "Uranium", "Antimony", "Europium"]
    
    var avaliableLetters: [Character] = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
    
    var visibleLetters = [Character]()
//    var currentWord =
    
    let newArray = removeLetterFromAvaliableLetterArray(avaliableLetters, chosenLetter)
    print(newArray)
}

func playerGuessInput() -> Character{
    print("What letter would you like to guess?")
    let optionalLetterInput = readLine()
    if let letterInput = optionalLetterInput{
         characterInput = letterInput[letterInput.startIndex]
        
        
    }
    return characterInput
    
        

        
    }


//func numGuessLeft() -> Int{
//    var guessLeft: Int = 7
//    guessLeft -= var showGuessLeft
//    return showGuessLeft
//}

func removeLetterFromAvaliableLetterArray(_ avaliableLetterRemove: Array<Character>, _ chosenLetter: Character) -> Array<Character>{
    var pendingRemovalArray: [Character] = avaliableLetterRemove
    
    print("")
    print(pendingRemovalArray)
    //let arraylength: Int = pendingRemovalArray.count
    if let letterIndex: Int = pendingRemovalArray.index(of: chosenLetter){
        let letterIndexArray = letterIndex
        if pendingRemovalArray.contains(chosenLetter) {
            pendingRemovalArray.remove(at: letterIndexArray)
            pendingRemovalArray.insert("_", at: letterIndexArray)
    }
    
    }
   

     return pendingRemovalArray
}
//func addWordToWorkingArray(_ avaliableWords: Array<String>){
//    var randWord = Int(arc4random_uniform(10))
//    //print(randWord)
//    let selectedWord: Int = avaliableWords[randWord].count
//    let currentWord: String = avaliableWords[randWord]
//    //print(avaliableWords[randWord])
////
//    //Adds dashes in unknown word to respresent number of missing letters
//    for _ in 0..<selectedWord{
//        visibleLetter.append("-")
//    }
//
//}

//func addGuessToVisibleLetterArray( visibleLetterAdd: Array<Character>, letterChoice: Character) -> Array<Character>{
    
//}

func initializeLetterArray() -> Array<Character>{
    let avaliableLetters: [Character] = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
    return avaliableLetters
    

}

func initializeWordArray() -> Array<String>{
    let avaliableWords: [String] = ["Oxygen", "Nitrogen", "Molybdenum", "Hafnium", "Promethium", "Yttrium", "Seaborgium", "Uranium", "Antimony", "Europium"]
    return avaliableWords
}

func initializeVisibleLetterArray() ->Array<Character>{
    let visibleLetter = [Character]()
    return visibleLetter
}

//func updatePlayer(_ avaliableLetter: Array<Character>, visibleLetter: Array<Character>){
//
//}



main()





