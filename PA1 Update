//  main.swift
//  Hangman
//  This program allows the user to play a game of Hangman.
//  CPSC 315-01, Fall 2018
//  Programming Assignment #1
//
//https://stackoverflow.com/questions/38164543/cannot-subscript-a-value-of-type-string-with-an-index-of-type-uint32
//https://stackoverflow.com/questions/38386969/swift-3-0-iterate-over-string-index-range
//
//
//  Created by Reid, Jon Carl on 9/3/18.
//  Copyright Â© 2018 Reid, Jon Carl. All rights reserved.
//

import Foundation

var characterInput: Character = "_"
var letterIndex: Int = 0
var letterIndexArray: Int = 6

func Main(){
    playGame()
}


func playGame(){
    
    
    
    var avaliableWords = ["oxygen", "nitrogen", "molybdenum", "hafnium", "promethium", "yttrium", "seaborgium", "uranium", "antimony", "europium"]
    
    var avaliableLetters: [Character] = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
    
    var visibleLetters = [Character]()
    var currentWord: String = addWordToWorkingArray(&avaliableWords, &visibleLetters)
    
    while visibleLetters.contains("_") || avaliableLetters.isEmpty == false{
        print("Hello")
        print("")
        var chosenLetter: Character = playerGuessInput()
        
        removeLetterFromAvaliableLetterArray(&avaliableLetters, chosenLetter)
        if currentWord.contains(chosenLetter){
            let optionalChosenIndex = currentWord.index(of: chosenLetter)
            if let chosenIndex: Int = optionalChosenIndex{
                visibleLetters.remove(at: chosenIndex)
                visibleLetters.insert(chosenLetter, at: chosenIndex)
            }
            
        }
        
        print("")
        
        print("")
        
        print("")
        print(visibleLetters)
    }
    
}

func replaceCorrectLetter(_ chosenLetter: inout Character,_ visibleLetterArray: inout Array<Character>){
    
}

func playerGuessInput() -> Character{
    print("What letter would you like to guess?")
    let optionalLetterInput = readLine()
    if let letterInput = optionalLetterInput{
        characterInput = letterInput[letterInput.startIndex]
    }
    return characterInput
}


func removeLetterFromAvaliableLetterArray(_ avaliableLetterRemove: inout Array<Character>, _ chosenLetter: Character){
    
    
    print("")
    
    //let arraylength: Int = pendingRemovalArray.count
    if let letterIndex: Int = avaliableLetterRemove.index(of: chosenLetter){
        // let letterIndexArray = letterIndex
        if avaliableLetterRemove.contains(chosenLetter) {
            avaliableLetterRemove.remove(at: letterIndex)
            //  avaliableLetterRemove.insert("_", at: letterIndex)
        }
        print(avaliableLetterRemove)
    }
}


func addWordToWorkingArray(_ avaliableWords: inout Array<String>, _ visibleLetter: inout Array<Character>) -> String{
    
    let randWord = Int(arc4random_uniform(10))
    //print(randWord)
    let selectedWord: String = avaliableWords[randWord]
    let selectedWordLength: Int = selectedWord.count
    
    print(selectedWord)

    //Adds dashes in unknown word to respresent number of missing letters
    for _ in 0..<selectedWordLength{
        visibleLetter.append("-")
    }
    return selectedWord
}


//func numGuessLeft() -> Int{
//    var guessLeft: Int = 7
//    guessLeft -= var showGuessLeft
//    return showGuessLeft
//}


//func addGuessToVisibleLetterArray( visibleLetterAdd: Array<Character>, letterChoice: Character) -> Array<Character>{

//}

//func initializeLetterArray() -> Array<Character>{
//    let avaliableLetters: [Character] = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
//    return avaliableLetters
//
//
//}
//
//func initializeWordArray() -> Array<String>{
//    let avaliableWords: [String] = ["Oxygen", "Nitrogen", "Molybdenum", "Hafnium", "Promethium", "Yttrium", "Seaborgium", "Uranium", "Antimony", "Europium"]
//    return avaliableWords
//}
//
//func initializeVisibleLetterArray() ->Array<Character>{
//    let visibleLetter = [Character]()
//    return visibleLetter
//}

//func updatePlayer(_ avaliableLetter: Array<Character>, visibleLetter: Array<Character>){
//
//}



Main()




